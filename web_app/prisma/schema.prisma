generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider  = "postgresql"
  // url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String
  resetToken    String?
  loginToken    LoginToken[]
  createdAt     DateTime     @default(now())

  contact String?

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  STS         STS[]
  landfill    LandFill[]
  issueReport IssueReport[]
  locationPoll LocationPoll[]
  workforces  Workforce[]
  contractor  Contractor?
}

model Role {
  id         String       @id @default(uuid())
  name       String       @unique
  user       User[]
  permission Permission[]
}

model Permission {
  id   String @id @default(cuid())
  name String @unique
  role Role[]
}

model LoginToken {
  id     String  @id @default(cuid())
  token  String?
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model STS {
  id           String         @id @default(cuid())
  wardNumber   String
  name         String?
  capacity     Float?
  longitude    Float?
  latitude     Float?
  vehicleEntry VehicleEntry[]
  manager      User[]
  vehicle      Vehicle[]
  vehicleRoute VehicleRoute[]
  contractor   Contractor[]
  WasteEntry   WasteEntry[]
}

model LandFill {
  id           String         @id @default(cuid())
  name         String
  longitude    Float?
  latitude     Float?
  vehicleEntry VehicleEntry[]
  manager      User[]
  vehicleRoute VehicleRoute[]
}

model Vehicle {
  id               String         @id @default(cuid())
  number           String         @unique
  type             String
  capacity         Float
  fuelCostUnloaded Float
  fuelCostLoaded   Float
  vehicleEntry     VehicleEntry[]
  STS              STS?           @relation(fields: [stsId], references: [id])
  stsId            String?
  WasteEntry       WasteEntry[]
}

model VehicleEntry {
  id            String   @id @default(cuid())
  wasteVolume   Float
  arrivalTime   DateTime
  departureTime DateTime

  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?

  STS   STS?    @relation(fields: [STSId], references: [id])
  STSId String?

  landFill   LandFill? @relation(fields: [landFillId], references: [id])
  landFillId String?
}

model WasteEntry {
  id             String   @id @default(cuid())
  wasteVolume    Float
  collectionDate DateTime
  wasteType      String

  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?

  contractor   Contractor? @relation(fields: [contractorId], references: [id])
  contractorId String?

  STS   STS?    @relation(fields: [stsId], references: [id])
  stsId String?
}

model VehicleRoute {
  id         String    @id @default(cuid())
  timestamp  DateTime?
  distance   Float
  duration   Float
  STS        STS?      @relation(fields: [stsId], references: [id])
  stsId      String?
  LandFill   LandFill? @relation(fields: [landFillId], references: [id])
  landFillId String?
}

model Contractor {
  id          String       @id @default(cuid())
  name        String
  contractId  String
  createdAt   DateTime     @default(now())
  tin         String       @unique
  contact     String
  size        Int
  salary      Float
  wasteVolume Float
  termination DateTime?
  wardNumber  String?
  STS         STS?         @relation(fields: [stsId], references: [id])
  stsId       String?
  workforces  Workforce[]
  manager     User?        @relation(fields: [userId], references: [id])
  userId      String?      @unique
  WasteEntry  WasteEntry[]
}

model Workforce {
  id           String      @id @default(cuid())
  name         String
  dateOfBirth  DateTime
  designation  String
  nid          String      @unique
  joiningDate  DateTime
  salary       Float
  contact      String
  manager      User?       @relation(fields: [userId], references: [id])
  userId       String?
  contractor   Contractor? @relation(fields: [contractorId], references: [id])
  contractorId String?
}

model IssueReport {
  id          String  @id @default(cuid())
  reportType  String?
  location    String?
  description String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model LocationPoll {
    id          String  @id @default(cuid())
    pollingTime     DateTime     @default(now())
    longitude    Float?
    latitude     Float?
    user   User?   @relation(fields: [userId], references: [id])
    userId String?
}
