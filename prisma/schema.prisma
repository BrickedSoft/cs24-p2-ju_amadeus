generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String
  resetToken    String?
  loginToken    LoginToken[]
  role          Role         @relation(fields: [roleId], references: [id])
  roleId        String
}

model Role {
  id         String       @id @default(uuid())
  name       String       @unique
  user       User[]
  permission Permission[]
}

model Permission {
  id   String @id @default(cuid())
  name String @unique
  role Role[]
}

model LoginToken {
  id     String  @id @default(cuid())
  token  String?
  user   User    @relation(fields: [userId], references: [id])
  userId String
}

model STS {
  id           String         @id @default(cuid())
  wardNumber   String
  name         String?
  capacity     Float?
  longitude    Float?
  latitude     Float?
  vehicleEntry VehicleEntry[]
}

model LandFill {
  id           String         @id @default(cuid())
  name         String
  longitude    Float?
  latitude     Float?
  vehicleEntry VehicleEntry[]
}

model Vehicle {
  id           String         @id @default(cuid())
  number       String
  type         String
  capacity     String
  vehicleEntry VehicleEntry[]
}

model VehicleEntry {
  id            String   @id @default(cuid())
  wasteVolume   Float
  arrivalTime   DateTime
  departureTime DateTime

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String

  STS   STS    @relation(fields: [STSId], references: [id])
  STSId String

  landFill   LandFill @relation(fields: [landFillId], references: [id])
  landFillId String
}
